/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import client.Client;
import client.ThreadEcoute;
import java.awt.Color;
import java.awt.Component;
import java.sql.Date;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import message.MessageMessageConversation;
import message.MessageTicket;
import modele.EtatMessage;
import modele.Groupe;
import modele.MessageConversation;
import modele.Ticket;
import modele.Utilisateur;
import serveur.Serveur;

/**
 *
 * @author Lucas
 */
public class FenetreClient extends javax.swing.JFrame {

    /**
     * Creates new form FenetreClient
     */
    private Client client;
    private ThreadEcoute thread;
    private Ticket ticketRecuSelect;
    private Ticket ticketCreeSelect;
    private String groupeRecuSelect;
    private String groupeCreeSelect;
    private DefaultTableModel tableModele;
    public FenetreClient(Client client, ThreadEcoute thread) {
        this.client = client;
        this.thread = thread;
        thread.start();
        initComponents();        
    }
    //DEBUG
    public FenetreClient(){
        initComponents();
    }

    public class LineWrapCellRenderer extends JTextArea implements TableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(
            JTable table,
            Object value,
            boolean isSelected,
            boolean hasFocus,
            int row,
            int column) {
        this.setText((String)value);
        //Gestion des couleurs des messages
        String etat = (String)table.getValueAt(row, 3);
        if(etat != null){
            switch(etat){
                case "LU_PAR_TOUS":
                    setBackground(Color.green);                                        
                    break;
                case "NON_LU_PAR_TOUS":
                    setBackground(Color.orange);
                    break;
                case "NON_RECU_PAR_TOUS":
                    setBackground(Color.red);
                    break;
                case "NON_RECU_PAR_LE_SERVEUR":
                    setBackground(Color.GRAY);
                    break;    
                default:
                    setBackground(Color.white);
            }            
        }
        //Masquer la colonne d'état
        table.getColumnModel().getColumn(3).setMinWidth(0);
        table.getColumnModel().getColumn(3).setMaxWidth(0);
        
        this.setWrapStyleWord(true);            
        this.setLineWrap(true);
        this.setColumns(3);
        int fontHeight = this.getFontMetrics(this.getFont()).getHeight();
        int textLength = this.getText().length();
        int lines = textLength / (this.getColumns() + 1) +1;//+1, cause we need at least 1 row.  
          
        int height = fontHeight * lines;     
        table.setRowHeight(row, height);
        this.setEditable(false);
        return this;
    }

}
    
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane4 = new javax.swing.JScrollPane();
        discussionArea = new javax.swing.JTextArea();
        creerTicketButton = new javax.swing.JButton();
        decoButton = new javax.swing.JButton();
        ongletsDiscu = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ticketsCreesTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        ticketsRecusTree = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        saisieDiscuArea = new javax.swing.JTextArea();
        envoyerButton = new javax.swing.JButton();
        titreDiscuLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        discussionTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();

        discussionArea.setColumns(20);
        discussionArea.setRows(5);
        discussionArea.setText("Peut etre generer un text area pour chaque message");
        jScrollPane4.setViewportView(discussionArea);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        creerTicketButton.setText("Créer nouveau ticket");
        creerTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creerTicketButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(creerTicketButton, gridBagConstraints);

        decoButton.setText("Déconnexion");
        decoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        getContentPane().add(decoButton, gridBagConstraints);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("administration");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("blue");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("violet");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("red");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("yellow");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("groupe 3.1");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("basketball");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("soccer");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("football");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hockey");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("food");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hot dogs");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("pizza");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ravioli");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("bananas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        ticketsCreesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ticketsCreesTree.setModel(new javax.swing.tree.DefaultTreeModel(getArbreModelCrees()));
        ticketsCreesTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ticketsCreesTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ticketsCreesTree);

        ongletsDiscu.addTab("Créés", jScrollPane1);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("groupe 1.1");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Problème chauffage");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Annulation de cours");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("red");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("yellow");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("groupe 4.2");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("basketball");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("soccer");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("football");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hockey");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("food");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hot dogs");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("pizza");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ravioli");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("bananas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        ticketsRecusTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ticketsRecusTree.setModel(new javax.swing.tree.DefaultTreeModel(getArbreModelRecus()));
        ticketsRecusTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ticketsRecusTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ticketsRecusTree);

        ongletsDiscu.addTab("Reçus", jScrollPane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 145;
        gridBagConstraints.ipady = 255;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 20, 0, 0);
        getContentPane().add(ongletsDiscu, gridBagConstraints);

        saisieDiscuArea.setColumns(20);
        saisieDiscuArea.setRows(5);
        saisieDiscuArea.setToolTipText("écire un message...");
        saisieDiscuArea.setMinimumSize(new java.awt.Dimension(15, 22));
        saisieDiscuArea.setPreferredSize(new java.awt.Dimension(300, 94));
        jScrollPane3.setViewportView(saisieDiscuArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 349;
        gridBagConstraints.ipady = 58;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jScrollPane3, gridBagConstraints);

        envoyerButton.setText("Envoyer");
        envoyerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envoyerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        getContentPane().add(envoyerButton, gridBagConstraints);

        titreDiscuLabel.setText("Discussion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 10, 0, 0);
        getContentPane().add(titreDiscuLabel, gridBagConstraints);

        usernameLabel.setText("Prénom Nom");
        if(client != null){
            Utilisateur util = client.getUtilisateurClient();
            if(client.getUtilisateurClient() != null){
                usernameLabel.setText(util.getPrenom() + " " + util.getNom());
            }
        }
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        getContentPane().add(usernameLabel, gridBagConstraints);

        jScrollPane5.setBorder(null);

        discussionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"util1", "message1", null, null},
                {"util2", "message2", null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        //Gestion selection de ligne
        discussionTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (discussionTable.getSelectedRow() > -1) {
                    // print first column value from selected row
                    System.out.println(discussionTable.getValueAt(discussionTable.getSelectedRow(), 1).toString());
                }
            }
        });
        //Mise en place du modele
        tableModele = new DefaultTableModel();
        setTableModel();
        discussionTable.setToolTipText("");
        discussionTable.getColumnModel().getColumn(1).setPreferredWidth(180);
        discussionTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        discussionTable.setPreferredSize(new java.awt.Dimension(300, 128));
        discussionTable.setShowHorizontalLines(false);
        discussionTable.setShowVerticalLines(false);
        jScrollPane5.setViewportView(discussionTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 567;
        gridBagConstraints.ipady = 243;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(16, 10, 0, 0);
        getContentPane().add(jScrollPane5, gridBagConstraints);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 6, 0, 0);
        getContentPane().add(refreshButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void envoyerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerButtonActionPerformed
        //Envoyer le message
        if(client != null){
            Date date = new java.sql.Date(Calendar.getInstance().getTimeInMillis());
            titreDiscuLabel.setText(date.toString());        
            MessageConversation messConv = new MessageConversation(-1, client.getUtilisateurClient(), saisieDiscuArea.getText(), date, EtatMessage.NON_RECU_PAR_LE_SERVEUR, true);
            //Recuperer ticket selectionné dans l'arbre
            //onglet 0 = crees, onglet 1 = recus
            int onglet = ongletsDiscu.getSelectedIndex();
            if(onglet == 0){
                ticketCreeSelect.ajouterMessage(messConv);
                MessageMessageConversation messTicket = new MessageMessageConversation(ticketCreeSelect.getIdTicket(), messConv);
                client.getReseaux().envoyerMessage(messTicket);  
            }
            if(onglet == 1){
                ticketRecuSelect.ajouterMessage(messConv);
                MessageMessageConversation messEnvoye = new MessageMessageConversation(ticketRecuSelect.getIdTicket(), messConv);
                client.getReseaux().envoyerMessage(messEnvoye);            
            }        
            //On efface le texte de la saisie
            saisieDiscuArea.setText("");
        }
        
    }//GEN-LAST:event_envoyerButtonActionPerformed
    
    private void ticketsCreesTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ticketsCreesTreeValueChanged
        if (evt.isAddedPath()) {
            TreePath path = evt.getPath();
            Object treeNode = path.getLastPathComponent();
            Object userObject = ((DefaultMutableTreeNode) treeNode).getUserObject();
            String text = userObject.toString();
            if (userObject instanceof Ticket) {
              Ticket node1 = (Ticket) userObject;
              String node2 = evt.getNewLeadSelectionPath().getParentPath().getLastPathComponent().toString();
                ticketCreeSelect = node1;
                groupeCreeSelect = node2;
                titreDiscuLabel.setText(ticketCreeSelect.toString());
                //Effacer la discussion précedente de l'interface
                //tableModele = new DefaultTableModel();
                //Afficher la discussion correspondante
                NavigableSet<MessageConversation> ensembleMessage = ticketCreeSelect.getFilDiscussion().getEnsembleMessage();
                for(MessageConversation mess : ensembleMessage){
                    String[] ligne = new String[5];
                    ligne[0] = mess.getCreateur().getPrenom() + " " + mess.getCreateur().getNom();
                    ligne[1] = mess.getTexte();
                    ligne[2] = mess.getDate().toString();
                    ligne[3] = mess.getEtatGroupe().toString();
                    tableModele.addRow(ligne);
                }      
                discussionTable.setModel(tableModele);
                //discussionTable.setDefaultRenderer(Object.class, new LineWrapCellRenderer()); 
            }            
        }       
        
        /*Ticket node1 = (Ticket) evt.getPath().getLastPathComponent();
        String node2 = evt.getNewLeadSelectionPath().getParentPath().getLastPathComponent().toString();
        ticketCreeSelect = node1;
        groupeCreeSelect = node2;
        titreDiscuLabel.setText(ticketCreeSelect.toString());
        //Effacer la discussion précedente de l'interface
        tableModele = new DefaultTableModel();
        //Afficher la discussion correspondante
        NavigableSet<MessageConversation> ensembleMessage = ticketCreeSelect.getFilDiscussion().getEnsembleMessage();
        for(MessageConversation mess : ensembleMessage){
            String[] ligne = new String[5];
            ligne[0] = mess.getCreateur().toString();
            ligne[1] = mess.getTexte();
            ligne[2] = mess.getDate().toString();            
            tableModele.addRow(ligne);
        }
        discussionTable.setModel(tableModele);
        */
    }//GEN-LAST:event_ticketsCreesTreeValueChanged

    private void creerTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerTicketButtonActionPerformed
        //Affichage d'une fenetre de creation de ticket
        if(client != null){
            FenetreClientNouvTicket fenNewTicket = new FenetreClientNouvTicket(client);
            fenNewTicket.setVisible(true);
        }
        //DEBUG
        //FenetreClientNouvTicket fenNewTicket = new FenetreClientNouvTicket();
    }//GEN-LAST:event_creerTicketButtonActionPerformed

    private void decoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decoButtonActionPerformed
        if(client != null){
          thread.stopper(thread);
            client.getReseaux().deconnexionServeur(client.getUtilisateurClient().getIdUtilisateur());
            FenetreClientConnexion fenetre = new FenetreClientConnexion();
            fenetre.setVisible(true);
            this.dispose();  
        }        

    }//GEN-LAST:event_decoButtonActionPerformed

    private void ticketsRecusTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ticketsRecusTreeValueChanged
        if (evt.isAddedPath()) {
            TreePath path = evt.getPath();
            Object treeNode = path.getLastPathComponent();
            Object userObject = ((DefaultMutableTreeNode) treeNode).getUserObject();
            String text = userObject.toString();
            if (userObject instanceof Ticket) {
              Ticket node1 = (Ticket) userObject;
              String node2 = evt.getNewLeadSelectionPath().getParentPath().getLastPathComponent().toString();
                ticketRecuSelect = node1;
                groupeRecuSelect = node2;
                titreDiscuLabel.setText(ticketRecuSelect.toString());
                //Effacer la discussion précedente de l'interface
                //tableModele = new DefaultTableModel();
                //Afficher la discussion correspondante
                NavigableSet<MessageConversation> ensembleMessage = ticketRecuSelect.getFilDiscussion().getEnsembleMessage();
                for(MessageConversation mess : ensembleMessage){
                    String[] ligne = new String[5];
                    ligne[0] = mess.getCreateur().getPrenom() + " " + mess.getCreateur().getNom();
                    ligne[1] = mess.getTexte();
                    ligne[2] = mess.getDate().toString();
                    ligne[3] = mess.getEtatGroupe().toString();
                    tableModele.addRow(ligne);
                }      
                discussionTable.setModel(tableModele);
                //discussionTable.setDefaultRenderer(Object.class, new LineWrapCellRenderer()); 
            }
            
        }        
    }//GEN-LAST:event_ticketsRecusTreeValueChanged

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //Effacer la discussion précedente de l'interface
        tableModele = new DefaultTableModel();
        //Afficher la discussion correspondante
        NavigableSet<MessageConversation> ensembleMessage = ticketRecuSelect.getFilDiscussion().getEnsembleMessage();
        for(MessageConversation mess : ensembleMessage){
            String[] ligne = new String[5];
            ligne[0] = mess.getCreateur().toString();
            ligne[1] = mess.getTexte();
            ligne[2] = mess.getDate().toString();
            ligne[3] = mess.getEtatGroupe().toString();
            tableModele.addRow(ligne);
        }
        discussionTable.setModel(tableModele);
    }//GEN-LAST:event_refreshButtonActionPerformed
    private DefaultMutableTreeNode getArbreModelRecus(){
        //PARTIE TICKETS RECUS
        if(client != null){
            Map<Groupe, List<Ticket>> ticketsRecu = client.getTicketsRecu();
            //Racine
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(new Ticket(0, "Tickets reçus", null, null, null));
            DefaultMutableTreeNode[] treeNode = new DefaultMutableTreeNode[100];
            int index = 0;
            //Création des noeuds des groupes
            Set<Groupe> groupes = ticketsRecu.keySet();
            for(Groupe gr : groupes){
                treeNode[index] = new DefaultMutableTreeNode(new Ticket(0, gr.getIdGroupe(), null, null, null));
                List<Ticket> tickets = ticketsRecu.get(gr);
                //Création des noeuds des tickets pour chaque groupe
                for(Ticket tk : tickets){
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(tk);
                    treeNode[index].add(node);
                }
                index ++;
            }
            //On relie chaque noeud de groupe a la racine
            for(int i = 0; i < index ; i++){
                root.add(treeNode[i]);
            }        
            return root;
        }
        //si le client n'est pas initialisé
        return null;
    }
    
    private DefaultMutableTreeNode getArbreModelCrees(){
        //PARTIE TICKETS CREES
        if(client != null){
            Map<Groupe, List<Ticket>> ticketsCree = client.getTicketsCree();
            //Racine
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(new Ticket(0, "Tickets crées", null, null, null));
            DefaultMutableTreeNode[] treeNode = new DefaultMutableTreeNode[100];
            int index = 0;
            //Création des noeuds des groupes
            Set<Groupe> groupes = ticketsCree.keySet();
            for(Groupe gr : groupes){
                treeNode[index] = new DefaultMutableTreeNode(new Ticket(0, gr.getIdGroupe(), null, null, null));
                List<Ticket> tickets = ticketsCree.get(gr);
                //Création des noeuds des tickets pour chaque groupe
                for(Ticket tk : tickets){
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(tk);
                    treeNode[index].add(node);
                }
                index ++;
            }
            //On relie chaque noeud de groupe a la racine
            for(int i = 0; i < index ; i++){
                root.add(treeNode[i]);
            }        
            return root;
            }
        //si le client n'est pas initialisé
        return null;
    }
    
    private void setTableModel(){
        //Création de colonnes
        //tableModele.addColumn("Image");
        tableModele.addColumn("Nom utilisateur");
        tableModele.addColumn("Message");
        tableModele.addColumn("Date");
        tableModele.addColumn("Etat");
        //TEST
        /*MessageConversation mess = new MessageConversation(45, null, "je suis le test", null, EtatMessage.LU_PAR_TOUS, true);
        
        String[] ligne = new String[4];
            //ligne[0] = mess.getCreateur().toString();
            ligne[1] = mess.getTexte();
            //ligne[2] = mess.getDate().toString();
            ligne[3] = mess.getEtatGroupe().toString();
            tableModele.addRow(ligne);
         */      
        //Remplissage des lignes par des messages
        //if utilisateur alors mettre a droite
        String[] test = {
                "Title 1", "Title 2", "Title 3", "LU_PAR_TOUS"
            };
        tableModele.addRow(test);
        discussionTable.setModel(tableModele);
        discussionTable.setDefaultRenderer(Object.class, new LineWrapCellRenderer()); 
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetreClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetreClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetreClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetreClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetreClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton creerTicketButton;
    private javax.swing.JButton decoButton;
    private javax.swing.JTextArea discussionArea;
    private javax.swing.JTable discussionTable;
    private javax.swing.JButton envoyerButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane ongletsDiscu;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextArea saisieDiscuArea;
    private javax.swing.JTree ticketsCreesTree;
    private javax.swing.JTree ticketsRecusTree;
    private javax.swing.JLabel titreDiscuLabel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
